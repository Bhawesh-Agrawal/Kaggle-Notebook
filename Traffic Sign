{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":3467365,"sourceType":"datasetVersion","datasetId":2087595}],"dockerImageVersionId":30918,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import os\nimport random \nimport shutil\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.applications import VGG16\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.layers import Dense, Flatten\nfrom tensorflow.keras.optimizers import Adam","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-02-23T10:08:52.813490Z","iopub.execute_input":"2025-02-23T10:08:52.813773Z","iopub.status.idle":"2025-02-23T10:09:05.655964Z","shell.execute_reply.started":"2025-02-23T10:08:52.813749Z","shell.execute_reply":"2025-02-23T10:09:05.655073Z"}},"outputs":[],"execution_count":1},{"cell_type":"code","source":"source_folder = \"/kaggle/input/traffic-signs-gtsrb-plus-162-custom-classes/Data_images/Train\"\nimage_dir = [f for f in os.listdir(source_folder)]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-23T10:09:09.611026Z","iopub.execute_input":"2025-02-23T10:09:09.611426Z","iopub.status.idle":"2025-02-23T10:09:09.764369Z","shell.execute_reply.started":"2025-02-23T10:09:09.611398Z","shell.execute_reply":"2025-02-23T10:09:09.763542Z"}},"outputs":[],"execution_count":2},{"cell_type":"code","source":"image_dict = {}\nfor i in image_dir:\n    image_dict[f\"image_{i}\"] = [f for f in os.listdir(f\"{source_folder}/{i}\") if f.endswith((\".jpg\",\".jpeg\",\".png\"))]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-23T10:09:10.566043Z","iopub.execute_input":"2025-02-23T10:09:10.566473Z","iopub.status.idle":"2025-02-23T10:09:17.610607Z","shell.execute_reply.started":"2025-02-23T10:09:10.566435Z","shell.execute_reply":"2025-02-23T10:09:17.609700Z"}},"outputs":[],"execution_count":3},{"cell_type":"code","source":"split_data = 0.9\ntrain_dict = {}\nval_dict = {}\nfor key, value in image_dict.items():\n    split = int(len(value) * split_data)\n    train_dict[key] = value[:split]\n    val_dict[key] = value[split:]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-23T10:09:17.611756Z","iopub.execute_input":"2025-02-23T10:09:17.612041Z","iopub.status.idle":"2025-02-23T10:09:17.620530Z","shell.execute_reply.started":"2025-02-23T10:09:17.612010Z","shell.execute_reply":"2025-02-23T10:09:17.619669Z"}},"outputs":[],"execution_count":4},{"cell_type":"code","source":"output_folder = \"/kaggle/working/\"\ntrain_folder = os.path.join(output_folder, \"train\")\nval_folder = os.path.join(output_folder, \"validation\")\nos.makedirs(train_folder, exist_ok=True)\nos.makedirs(val_folder, exist_ok=True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-23T10:09:17.622015Z","iopub.execute_input":"2025-02-23T10:09:17.622274Z","iopub.status.idle":"2025-02-23T10:09:17.633514Z","shell.execute_reply.started":"2025-02-23T10:09:17.622254Z","shell.execute_reply":"2025-02-23T10:09:17.632650Z"}},"outputs":[],"execution_count":5},{"cell_type":"code","source":"for i in image_dir:\n    i = os.path.join(\"/kaggle/working/train\", i)\n    os.makedirs(i, exist_ok=True)\nfor j in image_dir:\n    j = os.path.join(\"/kaggle/working/validation\", j)\n    os.makedirs(j, exist_ok=True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-23T10:09:17.634456Z","iopub.execute_input":"2025-02-23T10:09:17.634730Z","iopub.status.idle":"2025-02-23T10:09:17.657751Z","shell.execute_reply.started":"2025-02-23T10:09:17.634702Z","shell.execute_reply":"2025-02-23T10:09:17.657217Z"}},"outputs":[],"execution_count":6},{"cell_type":"code","source":"for key, value in train_dict.items():\n    k = key.split(\"_\")\n    for j in value:\n        src_path = os.path.join(source_folder, k[1], j)  # Corrected source file path\n        dest_path = os.path.join(\"/kaggle/working/train\", k[1])  # Corrected destination folder path\n        shutil.copy2(src_path, dest_path)\n\nfor key, value in val_dict.items():\n    k = key.split(\"_\")\n    for j in value:\n        src_path = os.path.join(source_folder, k[1], j)  # Corrected source file path\n        dest_path = os.path.join(\"/kaggle/working/validation\", k[1])  # Corrected destination folder path\n        shutil.copy2(src_path, dest_path)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-23T10:09:17.658403Z","iopub.execute_input":"2025-02-23T10:09:17.658581Z","iopub.status.idle":"2025-02-23T10:25:36.087530Z","shell.execute_reply.started":"2025-02-23T10:09:17.658565Z","shell.execute_reply":"2025-02-23T10:25:36.086707Z"}},"outputs":[],"execution_count":7},{"cell_type":"code","source":"import tensorflow as tf\n\ngpus = tf.config.experimental.list_physical_devices('GPU')\nif gpus:\n    try:\n        for gpu in gpus:\n            tf.config.experimental.set_memory_growth(gpu, True)\n        print(\"GPU is enabled\")\n    except RuntimeError as e:\n        print(e)\n\n\n# Define paths\ntrain_dir = \"/kaggle/working/train\"\nval_dir = \"/kaggle/working/validation\"\n\n\n# Data Augmentation & Preprocessing\ntrain_datagen = ImageDataGenerator(\n    rescale=1./255,\n    rotation_range=20,\n    width_shift_range=0.2,\n    height_shift_range=0.2,\n    shear_range=0.2,\n    zoom_range=0.2,\n    horizontal_flip=True,\n    fill_mode='nearest'\n)\n\nval_datagen = ImageDataGenerator(rescale=1./255)\n\n# Load images in batches\nbatch_size = 32\n\ntrain_generator = train_datagen.flow_from_directory(\n    train_dir,\n    target_size=(224, 224),\n    batch_size=batch_size,\n    class_mode='categorical'\n)\n\nval_generator = val_datagen.flow_from_directory(\n    val_dir,\n    target_size=(224, 224),\n    batch_size=batch_size,\n    class_mode='categorical'\n)\n\n# Load VGG16 without top layers\n#base_model = VGG16(weights=None, include_top=False, input_shape=(224, 224, 3))\n\n# Freeze base model layers\n#for layer in base_model.layers:\n#    layer.trainable = False\n\n# Add custom layers\n#x = Flatten()(base_model.output)\n#x = Dense(4096, activation='relu')(x)\n#x = Dense(1000, activation='relu')(x)\n#x = Dense(512, activation='relu')(x)\n#x = Dense(train_generator.num_classes, activation='softmax')(x)\n\nfrom tensorflow.keras.models import load_model\nfrom tensorflow.keras.callbacks import ModelCheckpoint\nmodel = load_model('/kaggle/input/traffic-signs-v2/keras/default/1/model_checkpoint.keras')\ncheckpoint = ModelCheckpoint(\"model_best.keras\", save_best_only=True, save_weights_only=False)\n\n# Train model\nhistory = model.fit(\n    train_generator,\n    validation_data=val_generator,\n    epochs=10,\n    callbacks=[checkpoint]\n)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-23T10:25:36.088820Z","iopub.execute_input":"2025-02-23T10:25:36.089047Z","iopub.status.idle":"2025-02-23T13:33:49.647903Z","shell.execute_reply.started":"2025-02-23T10:25:36.089028Z","shell.execute_reply":"2025-02-23T13:33:49.646290Z"}},"outputs":[{"name":"stdout","text":"GPU is enabled\nFound 87571 images belonging to 205 classes.\nFound 9855 images belonging to 205 classes.\nEpoch 1/10\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.10/dist-packages/keras/src/trainers/data_adapters/py_dataset_adapter.py:122: UserWarning: Your `PyDataset` class should call `super().__init__(**kwargs)` in its constructor. `**kwargs` can include `workers`, `use_multiprocessing`, `max_queue_size`. Do not pass these arguments to `fit()`, as they will be ignored.\n  self._warn_if_super_not_called()\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m2737/2737\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1210s\u001b[0m 436ms/step - accuracy: 0.2749 - loss: 2.8041 - val_accuracy: 0.3798 - val_loss: 2.2457\nEpoch 2/10\n\u001b[1m2737/2737\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1158s\u001b[0m 422ms/step - accuracy: 0.2936 - loss: 2.7223 - val_accuracy: 0.4296 - val_loss: 2.0088\nEpoch 3/10\n\u001b[1m2737/2737\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1105s\u001b[0m 403ms/step - accuracy: 0.3039 - loss: 2.6827 - val_accuracy: 0.2902 - val_loss: 2.9160\nEpoch 4/10\n\u001b[1m2737/2737\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1120s\u001b[0m 408ms/step - accuracy: 0.3129 - loss: 2.6460 - val_accuracy: 0.3960 - val_loss: 2.1532\nEpoch 5/10\n\u001b[1m2737/2737\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1119s\u001b[0m 408ms/step - accuracy: 0.3197 - loss: 2.6154 - val_accuracy: 0.4124 - val_loss: 2.1519\nEpoch 6/10\n\u001b[1m2737/2737\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1127s\u001b[0m 411ms/step - accuracy: 0.3330 - loss: 2.5628 - val_accuracy: 0.4381 - val_loss: 1.9754\nEpoch 7/10\n\u001b[1m2737/2737\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1116s\u001b[0m 407ms/step - accuracy: 0.3394 - loss: 2.5244 - val_accuracy: 0.4939 - val_loss: 1.7450\nEpoch 8/10\n\u001b[1m2737/2737\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1107s\u001b[0m 403ms/step - accuracy: 0.3445 - loss: 2.5020 - val_accuracy: 0.3943 - val_loss: 2.2245\nEpoch 9/10\n\u001b[1m2737/2737\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1098s\u001b[0m 400ms/step - accuracy: 0.3543 - loss: 2.4760 - val_accuracy: 0.4374 - val_loss: 2.0741\nEpoch 10/10\n\u001b[1m2737/2737\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1118s\u001b[0m 408ms/step - accuracy: 0.3626 - loss: 2.4441 - val_accuracy: 0.5132 - val_loss: 1.6714\n","output_type":"stream"}],"execution_count":8},{"cell_type":"code","source":"test_datagen = ImageDataGenerator(rescale=1./255)\ntest_generator = test_datagen.flow_from_directory(\n    \"/kaggle/input/traffic-signs-gtsrb-plus-162-custom-classes/Data_images/Test\",\n    target_size=(224, 224),\n    batch_size=batch_size,\n    class_mode='categorical'\n)\nmodel.evaluate(test_generator)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-23T13:34:01.023913Z","iopub.execute_input":"2025-02-23T13:34:01.024582Z","iopub.status.idle":"2025-02-23T13:37:10.767431Z","shell.execute_reply.started":"2025-02-23T13:34:01.024549Z","shell.execute_reply":"2025-02-23T13:37:10.766199Z"}},"outputs":[{"name":"stdout","text":"Found 0 images belonging to 0 classes.\n","output_type":"stream"},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-9-4eee4d085346>\u001b[0m in \u001b[0;36m<cell line: 8>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      6\u001b[0m     \u001b[0mclass_mode\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'categorical'\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m )\n\u001b[0;32m----> 8\u001b[0;31m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mevaluate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtest_generator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/src/utils/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    120\u001b[0m             \u001b[0;31m# To get the full stack trace, call:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    121\u001b[0m             \u001b[0;31m# `keras.config.disable_traceback_filtering()`\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 122\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwith_traceback\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfiltered_tb\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    123\u001b[0m         \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    124\u001b[0m             \u001b[0;32mdel\u001b[0m \u001b[0mfiltered_tb\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/src/tree/optree_impl.py\u001b[0m in \u001b[0;36mmap_structure\u001b[0;34m(func, *structures)\u001b[0m\n\u001b[1;32m     74\u001b[0m         \u001b[0;32mraise\u001b[0m \u001b[0mTypeError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"`func` must be callable. Received: func={func}\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     75\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mstructures\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 76\u001b[0;31m         \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Must provide at least one structure\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     77\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0mother\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mstructures\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     78\u001b[0m         \u001b[0massert_same_structure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstructures\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mother\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcheck_types\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: Must provide at least one structure"],"ename":"ValueError","evalue":"Must provide at least one structure","output_type":"error"}],"execution_count":9},{"cell_type":"code","source":"from tensorflow.keras.models import save_model\nmodel.save(\"model_checkpoint.keras\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-23T13:38:25.761348Z","iopub.execute_input":"2025-02-23T13:38:25.761632Z","iopub.status.idle":"2025-02-23T13:38:30.747934Z","shell.execute_reply.started":"2025-02-23T13:38:25.761612Z","shell.execute_reply":"2025-02-23T13:38:30.747250Z"}},"outputs":[],"execution_count":10},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}